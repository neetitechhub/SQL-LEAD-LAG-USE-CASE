/** 
CREATE DATABASE LEADLAGDBEXAMPLE
USE LEADLAGDBEXAMPLE
CREATE TABLE SALES (
    ID INT PRIMARY KEY,
    SALES_AMOUNT DECIMAL(10, 2),
    SALES_DATE DATE
);

INSERT INTO SALES (ID, SALES_AMOUNT, SALES_DATE) VALUES
(1, 100.00, '2024-01-15'),
(2, 200.00, '2024-02-10'),
(3, 150.00, '2024-03-05'),
(4, 300.00, '2024-04-20'),
(5, 400.00, '2024-05-10'),
(6, 250.00, '2024-06-30'),
(7, 500.00, '2024-07-15'),
(8, 600.00, '2024-07-20'),
(9, 350.00, '2024-07-25'),
(10, 450.00, '2024-07-30'),
(11, 550.00, '2023-07-30'),
(12, 550.00, '2023-07-30'),
(13, 550.00, '2023-07-30')

**/

--1. COMPARE TOTAL SALES FOR THE LAST QUARTER AND THE CURRENT QUARTER
WITH QUARTERS AS (
    SELECT
        CASE
            WHEN MONTH(SALES_DATE) IN (1, 2, 3) THEN 'Q1'
            WHEN MONTH(SALES_DATE) IN (4, 5, 6) THEN 'Q2'
            WHEN MONTH(SALES_DATE) IN (7, 8, 9) THEN 'Q3'
            WHEN MONTH(SALES_DATE) IN (10, 11, 12) THEN 'Q4'
        END AS QUARTER,
        YEAR(SALES_DATE) AS YEAR,
        SALES_AMOUNT
    FROM SALES
)
SELECT
    QUARTER,
    YEAR,
    SUM(SALES_AMOUNT) AS TOTAL_SALES
FROM QUARTERS
GROUP BY QUARTER, YEAR
ORDER BY YEAR, QUARTER;
--THIS REFINED QUERY FIRST CALCULATES THE TOTAL SALES FOR EACH QUARTER, THEN RETRIEVES THE TOTAL SALES FOR THE LAST TWO QUARTERS (CURRENT QUARTER AND PREVIOUS QUARTER) TO COMPARE THEIR VALUES.
WITH QUARTERS AS (
    SELECT
        CASE
            WHEN MONTH(SALES_DATE) IN (1, 2, 3) THEN 1
            WHEN MONTH(SALES_DATE) IN (4, 5, 6) THEN 2
            WHEN MONTH(SALES_DATE) IN (7, 8, 9) THEN 3
            WHEN MONTH(SALES_DATE) IN (10, 11, 12) THEN 4
        END AS QUARTER,
        YEAR(SALES_DATE) AS YEAR,
        SALES_AMOUNT
    FROM SALES
),
CURRENT_AND_LAST_QUARTERS AS (
    SELECT TOP 2
        QUARTER,
        YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM QUARTERS
    GROUP BY QUARTER, YEAR
    ORDER BY YEAR DESC, QUARTER DESC
)
SELECT * FROM CURRENT_AND_LAST_QUARTERS;

-- 2-ND WAY- USING LEAD/LAG FUNCTION --FIRST, WE NEED TO CALCULATE THE TOTAL SALES PER QUARTER. 
--THEN WE USE THE LAG FUNCTION TO COMPARE THE SALES OF THE CURRENT QUARTER WITH THE PREVIOUS QUARTER.
WITH QUARTERLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        DATEPART(QUARTER, SALES_DATE) AS QUARTER,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE),
        DATEPART(QUARTER, SALES_DATE)
),
SALES_COMPARISON AS (
    SELECT 
        YEAR,
        QUARTER,
        TOTAL_SALES,
        LAG(TOTAL_SALES) OVER (ORDER BY YEAR, QUARTER) AS PREVIOUS_QUARTER_SALES
    FROM 
        QUARTERLY_SALES
)
SELECT 
    YEAR,
    QUARTER,
    TOTAL_SALES,
    PREVIOUS_QUARTER_SALES,
    TOTAL_SALES - PREVIOUS_QUARTER_SALES AS SALES_DIFFERENCE
FROM 
    SALES_COMPARISON
ORDER BY 
    YEAR, QUARTER;

-- 3RD WAY
	WITH QUARTERLY_SALES AS (
    SELECT
        CASE
            WHEN DATEPART(QUARTER, SALES_DATE) = DATEPART(QUARTER, GETDATE()) 
                 AND DATEPART(YEAR, SALES_DATE) = DATEPART(YEAR, GETDATE()) THEN 'CURRENT QUARTER'
            WHEN DATEPART(QUARTER, SALES_DATE) = DATEPART(QUARTER, DATEADD(QUARTER, -1, GETDATE())) 
                 AND DATEPART(YEAR, SALES_DATE) = DATEPART(YEAR, DATEADD(QUARTER, -1, GETDATE())) THEN 'LAST QUARTER'
            ELSE 'OTHER'
        END AS QUARTER,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM SALES
    WHERE SALES_DATE >= DATEADD(QUARTER, -1, GETDATE()) -- ENSURING WE ONLY GET DATA FROM THE LAST TWO QUARTERS
    GROUP BY  DATEPART(QUARTER, SALES_DATE) , DATEPART(YEAR, SALES_DATE) 
    )
SELECT
    QUARTER,
    TOTAL_SALES
FROM QUARTERLY_SALES
WHERE QUARTER IN ('CURRENT QUARTER', 'LAST QUARTER');

--- 2. COMPARE TOTAL SALES FROM THE LAST YEAR TO THE CURRENT YEAR IN SQL USING LEAD/LAG WITH EXAMPLE AND DATA
--1 WAY
WITH YEARLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE)
),
SALES_COMPARISON AS (
    SELECT 
        YEAR,
        TOTAL_SALES,
        LAG(TOTAL_SALES) OVER (ORDER BY YEAR) AS PREVIOUS_YEAR_SALES
    FROM 
        YEARLY_SALES
)
SELECT 
    YEAR,
    TOTAL_SALES,
    PREVIOUS_YEAR_SALES,
    TOTAL_SALES - PREVIOUS_YEAR_SALES AS SALES_DIFFERENCE
FROM 
    SALES_COMPARISON
ORDER BY 
    YEAR;
--2ND WAY
WITH YEARLY_SALES AS (
    SELECT
        CASE
            WHEN DATEPART(YEAR, SALES_DATE) = DATEPART(YEAR, GETDATE()) THEN 'CURRENT YEAR'
            WHEN DATEPART(YEAR, SALES_DATE) = DATEPART(YEAR, DATEADD(YEAR, -1, GETDATE())) THEN 'LAST YEAR'
            ELSE 'OTHER'
        END AS YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM SALES
    WHERE SALES_DATE >= DATEADD(YEAR, -1, GETDATE()) -- ENSURING WE ONLY GET DATA FROM THE LAST TWO YEARS
    GROUP BY DATEPART(YEAR, SALES_DATE)
  --      CASE
  --          WHEN DATEPART(YEAR, SALES_DATE) = DATEPART(YEAR, GETDATE()) THEN 'CURRENT YEAR'
  --          WHEN DATEPART(YEAR, SALES_DATE) = DATEPART(YEAR, DATEADD(YEAR, -1, GETDATE())) THEN 'LAST YEAR'
		--END
    )
SELECT
    YEAR,
    TOTAL_SALES
FROM YEARLY_SALES
WHERE YEAR IN ('CURRENT YEAR', 'LAST YEAR');

--3rd WAY

WITH YEARLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE)
),
SALES_COMPARISON AS (
    SELECT 
        YEAR,
        TOTAL_SALES,
        LAG(TOTAL_SALES) OVER (ORDER BY YEAR) AS PREVIOUS_YEAR_SALES
    FROM 
        YEARLY_SALES
)
SELECT 
    YEAR,
    TOTAL_SALES,
    PREVIOUS_YEAR_SALES,
    TOTAL_SALES - PREVIOUS_YEAR_SALES AS SALES_DIFFERENCE
FROM 
    SALES_COMPARISON
ORDER BY 
    YEAR;

-- 4TH WAY

WITH YEARLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE)
)
SELECT 
    YS.YEAR AS CURRENT_YEAR,
    YS.TOTAL_SALES AS CURRENT_YEAR_SALES,
    PREVIOUS.TOTAL_SALES AS PREVIOUS_YEAR_SALES,
    YS.TOTAL_SALES - PREVIOUS.TOTAL_SALES AS SALES_DIFFERENCE
FROM 
    YEARLY_SALES AS YS
LEFT JOIN 
    YEARLY_SALES AS PREVIOUS
ON 
    YS.YEAR = PREVIOUS.YEAR + 1
ORDER BY 
    YS.YEAR;

--3. SQL QUERY TO COMPARE THE REVENUE OF A COMPANY MONTH-OVER-MONTH :

-- 1 WAY

WITH MONTHLYREVENUE AS (
    SELECT
        DATEPART(MONTH, SALES_DATE) AS MONTH,
        SUM(SALES_AMOUNT) AS TOTAL_REVENUE
    FROM
        SALES
    GROUP BY
        DATEPART(MONTH, SALES_DATE)
)
SELECT
    MONTH,
    TOTAL_REVENUE,
    LAG(TOTAL_REVENUE) OVER (ORDER BY MONTH) AS PREVIOUS_MONTH_REVENUE,
    (TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER (ORDER BY MONTH)) AS REVENUE_CHANGE,
    ROUND(((TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER (ORDER BY MONTH)) / NULLIF(LAG(TOTAL_REVENUE) OVER (ORDER BY MONTH), 0)) * 100, 2) AS PERCENT_CHANGE
FROM
    MONTHLYREVENUE
ORDER BY
    MONTH;
-- 2ND WAY
WITH MONTHLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        DATEPART(MONTH, SALES_DATE) AS MONTH,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE),
        DATEPART(MONTH, SALES_DATE)
)
SELECT 
    MS.YEAR,
    MS.MONTH,
    MS.TOTAL_SALES,
    PREVIOUS.TOTAL_SALES AS PREVIOUS_MONTH_SALES,
    MS.TOTAL_SALES - COALESCE(PREVIOUS.TOTAL_SALES, 0) AS SALES_DIFFERENCE
FROM 
    MONTHLY_SALES AS MS
LEFT JOIN 
    MONTHLY_SALES AS PREVIOUS
ON 
    MS.YEAR = PREVIOUS.YEAR AND MS.MONTH = PREVIOUS.MONTH + 1
    OR (MS.YEAR = PREVIOUS.YEAR + 1 AND MS.MONTH = 1 AND PREVIOUS.MONTH = 12)
ORDER BY 
    MS.YEAR, MS.MONTH;

-- 3RD WAY

WITH MONTHLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        DATEPART(MONTH, SALES_DATE) AS MONTH,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE),
        DATEPART(MONTH, SALES_DATE)
)
SELECT 
    YEAR,
    MONTH,
    TOTAL_SALES,
    LAG(TOTAL_SALES) OVER (ORDER BY YEAR, MONTH) AS PREVIOUS_MONTH_SALES,
    TOTAL_SALES - LAG(TOTAL_SALES) OVER (ORDER BY YEAR, MONTH) AS SALES_DIFFERENCE
FROM 
    MONTHLY_SALES
ORDER BY 
    YEAR, MONTH;

--4. YEAR-OVER-YEAR (YOY) COMPARISON :

WITH YEARLYREVENUE AS (
    SELECT
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_REVENUE
    FROM
        SALES
    GROUP BY
        DATEPART(YEAR, SALES_DATE)
)
SELECT
    YEAR,
    TOTAL_REVENUE,
    LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR) AS PREVIOUS_YEAR_REVENUE,
    (TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR)) AS REVENUE_CHANGE,
    ROUND(((TOTAL_REVENUE - LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR)) / NULLIF(LAG(TOTAL_REVENUE) OVER (ORDER BY YEAR), 0)) * 100, 2) AS PERCENT_CHANGE
FROM
    YEARLYREVENUE
ORDER BY
    YEAR;

-- 2ND WAY

WITH YEARLY_SALES AS (
    SELECT 
        DATEPART(YEAR, SALES_DATE) AS YEAR,
        SUM(SALES_AMOUNT) AS TOTAL_SALES
    FROM 
        SALES
    GROUP BY 
        DATEPART(YEAR, SALES_DATE)
)
SELECT 
    YS.YEAR,
    YS.TOTAL_SALES AS CURRENT_YEAR_SALES,
    PREVIOUS.TOTAL_SALES AS PREVIOUS_YEAR_SALES,
    YS.TOTAL_SALES - COALESCE(PREVIOUS.TOTAL_SALES, 0) AS SALES_DIFFERENCE
FROM 
    YEARLY_SALES AS YS
LEFT JOIN 
    YEARLY_SALES AS PREVIOUS
ON 
    YS.YEAR = PREVIOUS.YEAR + 1
ORDER BY 
    YS.YEAR;
--SQL QUERY TO COMPARE CURRENT STOCK LEVELS WITH PREVIOUS PERIODS TO OPTIMIZE INVENTORY CONTROL WITH EXAMPLE AND DATA
-- STOCKS (TABLE )--STOCK_ID	STOCK_DATE	STOCK_LEVEL
--WITH MONTHLY_STOCK AS (
--    SELECT 
--        DATEPART(YEAR, STOCK_DATE) AS YEAR,
--        DATEPART(MONTH, STOCK_DATE) AS MONTH,
--        SUM(STOCK_LEVEL) AS TOTAL_STOCK_LEVEL
--    FROM 
--        STOCKS
--    GROUP BY 
--        DATEPART(YEAR, STOCK_DATE),
--        DATEPART(MONTH, STOCK_DATE)
--)
--SELECT 
--    YEAR,
--    MONTH,
--    TOTAL_STOCK_LEVEL,
--    LAG(TOTAL_STOCK_LEVEL) OVER (ORDER BY YEAR, MONTH) AS PREVIOUS_MONTH_STOCK_LEVEL,
--    TOTAL_STOCK_LEVEL - LAG(TOTAL_STOCK_LEVEL) OVER (ORDER BY YEAR, MONTH) AS STOCK_DIFFERENCE
--FROM 
--    MONTHLY_STOCK
--ORDER BY 
--    YEAR, MONTH;


--5. RUNNING TOTAL -> RUNNING TOTAL CAN BE CALCULATED USING THE SUM FUNCTION WITH THE OVER CLAUSE IN SQL.

SELECT
    SALES_DATE,
    SALES_AMOUNT,
    SUM(SALES_AMOUNT) OVER (ORDER BY SALES_DATE) AS RUNNING_TOTAL
FROM
    SALES;
	
--6. MOVING AVERAGE  -> A MOVING AVERAGE CAN BE CALCULATED USING THE AVG FUNCTION WITH THE OVER CLAUSE. 
--YOU CAN SPECIFY A WINDOW FRAME TO CALCULATE THE MOVING AVERAGE. HERES AN EXAMPLE FOR A 3-DAY MOVING AVERAGE:

SELECT
    SALES_DATE,
    SALES_AMOUNT,
    AVG(SALES_AMOUNT) OVER (ORDER BY SALES_DATE ROWS BETWEEN 2 PRECEDING AND CURRENT ROW) AS MOVING_AVERAGE
FROM
    SALES;